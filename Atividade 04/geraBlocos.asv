function [] = geraBlocos(I, classe, qtdeFragmentosVerticais, qtdeFragmentosHorizontais, fidLbp, fidGlcm, fid)

[height, width] = size( I );

height = height / qtdeFragmentosVerticais;
width  = width  / qtdeFragmentosHorizontais;

values = [];

disp('Classe:')
disp(classe)

for idxSubImagemVertical=0:qtdeFragmentosVerticais-1
    yInicial = round( idxSubImagemVertical      * height);
    yFinal   = round((idxSubImagemVertical + 1) * height);

    for idxSubImagemHorizontal=0:qtdeFragmentosHorizontais-1
        xInicial = round( idxSubImagemHorizontal      * width);
        xFinal   = round((idxSubImagemHorizontal + 1) * width);

        subImagem = imcrop(I, [xInicial yInicial round(xFinal - xInicial) round(yFinal - yInicial)]);

        % Descomentar no caso de usar o LBP
        
        if (useLbp)
            mapping=getmapping(8,'u2');
            featureVector = lbp(subImagem,2,8,mapping,'nh'); 
            values = [values, featureVector];
        end

        if (useGlcm)
            [glcm,SI] = graycomatrix(I,'NumLevels',4, 'Offset', [0 1; -1 1;-1 0;-1 -1] , 'Symmetric',true);
            featureVector     = graycoprops(glcm,{'Contrast','Homogeneity', 'Correlation', 'Energy'}) ;
            
            temp = struct2cell(featureVector);
            featureVectorGLCM = horzcat(temp{:});
            values = [values, featureVectorGLCM];
        end

     

    end

end

fprintf(fid, '%.100f ', values );
fprintf(fid, '%s\n', classe ); 
end